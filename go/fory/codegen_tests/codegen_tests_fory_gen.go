// Code generated by forygen. DO NOT EDIT.
// source: github.com/apache/fory/go/fory/codegen_tests
// generated at: 2025-08-30T16:43:44+08:00

package codegen_tests

import (
	"fmt"
	"github.com/apache/fory/go/fory"
	"reflect"
)

func init() {
	fory.RegisterGeneratedSerializer((*ValidationDemo)(nil), ValidationDemo_ForyGenSerializer{})
}

type ValidationDemo_ForyGenSerializer struct{}

func (ValidationDemo_ForyGenSerializer) TypeId() fory.TypeId {
	return fory.NAMED_STRUCT
}

func (ValidationDemo_ForyGenSerializer) NeedWriteRef() bool {
	return true
}

// WriteTyped provides strongly-typed serialization with no reflection overhead
func (g ValidationDemo_ForyGenSerializer) WriteTyped(f *fory.Fory, buf *fory.ByteBuffer, v *ValidationDemo) error {
	// Write precomputed struct hash for compatibility checking
	buf.WriteInt32(300045621) // hash of ValidationDemo structure

	// Write fields in sorted order
	// Field: B (string)
	f.WriteReferencable(buf, reflect.ValueOf(v.B))
	// Field: C (int64)
	buf.WriteInt64(v.C)
	// Field: A (int32)
	buf.WriteInt32(v.A)
	return nil
}

// ReadTyped provides strongly-typed deserialization with no reflection overhead
func (g ValidationDemo_ForyGenSerializer) ReadTyped(f *fory.Fory, buf *fory.ByteBuffer, v *ValidationDemo) error {
	// Read and verify struct hash
	if got := buf.ReadInt32(); got != 300045621 {
		return fmt.Errorf("struct hash mismatch for ValidationDemo: expected 300045621, got %d", got)
	}

	// Read fields in same order as write
	// Field: B (string)
	f.ReadReferencable(buf, reflect.ValueOf(&v.B).Elem())
	// Field: C (int64)
	v.C = buf.ReadInt64()
	// Field: A (int32)
	v.A = buf.ReadInt32()
	return nil
}

// Write provides reflect.Value interface compatibility
func (g ValidationDemo_ForyGenSerializer) Write(f *fory.Fory, buf *fory.ByteBuffer, value reflect.Value) error {
	// Convert reflect.Value to concrete type and delegate to typed method
	var v *ValidationDemo
	if value.Kind() == reflect.Ptr {
		v = value.Interface().(*ValidationDemo)
	} else {
		// Create a copy to get a pointer
		temp := value.Interface().(ValidationDemo)
		v = &temp
	}
	// Delegate to strongly-typed method for maximum performance
	return g.WriteTyped(f, buf, v)
}

// Read provides reflect.Value interface compatibility
func (g ValidationDemo_ForyGenSerializer) Read(f *fory.Fory, buf *fory.ByteBuffer, type_ reflect.Type, value reflect.Value) error {
	// Convert reflect.Value to concrete type and delegate to typed method
	var v *ValidationDemo
	if value.Kind() == reflect.Ptr {
		if value.IsNil() {
			// For pointer types, allocate using type_.Elem()
			value.Set(reflect.New(type_.Elem()))
		}
		v = value.Interface().(*ValidationDemo)
	} else {
		// value must be addressable for read
		v = value.Addr().Interface().(*ValidationDemo)
	}
	// Delegate to strongly-typed method for maximum performance
	return g.ReadTyped(f, buf, v)
}
